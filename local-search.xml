<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>JS高级-ES6中常用的方法</title>
    <link href="/2021/02/09/JS%E9%AB%98%E7%BA%A7-day05-ES6%E3%80%81let%E3%80%81const%E3%80%81%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC%E3%80%81%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E3%80%81%E5%89%A9%E4%BD%99%E5%8F%82%E6%95%B0%E3%80%81%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6%E3%80%81%E6%A8%A1%E7%89%88%E5%AD%97%E7%AC%A6%E4%B8%B2%E3%80%81set/"/>
    <url>/2021/02/09/JS%E9%AB%98%E7%BA%A7-day05-ES6%E3%80%81let%E3%80%81const%E3%80%81%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC%E3%80%81%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E3%80%81%E5%89%A9%E4%BD%99%E5%8F%82%E6%95%B0%E3%80%81%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6%E3%80%81%E6%A8%A1%E7%89%88%E5%AD%97%E7%AC%A6%E4%B8%B2%E3%80%81set/</url>
    
    <content type="html"><![CDATA[<p>这里总结ES6新增语法。主要包括let、const、解构赋值、箭头函数等书写格式及方法。拓展了一些相关知识，如剩余参数、拓展运算符、模版字符串、set等。</p><p>ES6 从2015年6月开始发布，每年的6月会正式更新一次，作为当年的正式版本（如ES2016、ES2018）。因此，ES6 既是一个历史名词，也是一个泛指，含义是 5.1 版以后的 JavaScript 的下一代标准，涵盖了 ES2015、ES2016、ES2017 等等，而 ES2015 则是正式名称，特指该年发布的正式版本的语言标准。</p><h2 id="JS高级-day05"><a href="#JS高级-day05" class="headerlink" title="JS高级 day05"></a>JS高级 day05</h2><h3 id="1-ES6概念"><a href="#1-ES6概念" class="headerlink" title="1. ES6概念"></a>1. ES6概念</h3><p>ES 的全称是 ECMAScript , 它是由 ECMA 国际标准化组织,制定的一项脚本语言的标准化规范</p><table><thead><tr><th align="center">年份</th><th align="center">版本</th></tr></thead><tbody><tr><td align="center">2015年6月</td><td align="center">ES2015</td></tr><tr><td align="center">2016年6月</td><td align="center">ES2016</td></tr><tr><td align="center">2017年6月</td><td align="center">ES2017</td></tr><tr><td align="center">2018年6月</td><td align="center">ES2018</td></tr><tr><td align="center">…</td><td align="center">…</td></tr></tbody></table><h3 id="2-ES6-新增语法"><a href="#2-ES6-新增语法" class="headerlink" title="2. ES6 新增语法"></a>2. ES6 新增语法</h3><h4 id="2-1-let（★★★）"><a href="#2-1-let（★★★）" class="headerlink" title="2.1 let（★★★）"></a><strong><span style="color: ; background-color: yellow;">2.1 let（★★★）</span></strong></h4><p>ES6中新增了用于声明变量的关键字</p><h5 id="2-1-1-let-作用"><a href="#2-1-1-let-作用" class="headerlink" title="2.1.1 let 作用"></a>2.1.1 let 作用</h5><p>用来声明一个有块级作用域的变量，使用方法和 var 一样</p><h5 id="2-1-2-let-定义变量的特点"><a href="#2-1-2-let-定义变量的特点" class="headerlink" title="2.1.2 let 定义变量的特点"></a>2.1.2 let 定义变量的特点</h5><ol><li><p>只在声明时的块或子块中可用</p></li><li><p>不存在变量提升，只能先声明再使用</p></li><li><p>存在“暂存死区”</p></li><li><p>同一作用域下不能重复声明同一变量</p></li><li><p>声明的变量不会挂载在 window 对象上 </p></li></ol><h5 id="2-1-3-暂时性死区的本质"><a href="#2-1-3-暂时性死区的本质" class="headerlink" title="2.1.3 暂时性死区的本质"></a>2.1.3 暂时性死区的本质</h5><p> 只要一进入当前作用域，所要使用的变量就已经存在了，但是不可获取，</p><p> 只有等到声明变量的那一行代码出现，才可以获取和使用该变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> bar = <span class="hljs-number">20</span><br><span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;<br>    <span class="hljs-built_in">console</span>.log(bar); <span class="hljs-comment">//报错  bar存在当前的块级作用域，但是无法提前访问</span><br>    <span class="hljs-keyword">let</span> bar = <span class="hljs-number">10</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2-const（★★★）"><a href="#2-2-const（★★★）" class="headerlink" title="2.2 const（★★★）"></a><strong><span style="color: ; background-color: yellow;">2.2 const（★★★）</span></strong></h4><p>2.2.1 const 作用</p><p>声明常量，常量就是值（内存地址）不能变化的量</p><p>2.2.1 const 特点</p><ol><li><p>声明常量时必须要初始化值</p><ol start="2"><li><p>同样具有块级作用域和“暂存死区”</p></li><li><p>赋值为简单数据类型时，不能直接修改值</p></li></ol></li><li><p>赋值为复杂数据类型时，可以修改对象内部的属性和方法</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> data = &#123;<br>     a: <span class="hljs-number">1</span>,<br>     b: <span class="hljs-number">2</span><br> &#125;<br>data.a = <span class="hljs-number">10</span> <span class="hljs-comment">//这里可以通过，原因是data的内存地址值没有发生改变</span><br>data=[] <span class="hljs-comment">//这里会报错，原因是data的内存地址值发生了改变</span><br></code></pre></td></tr></table></figure><h4 id="2-3-let-const-var关键字区别"><a href="#2-3-let-const-var关键字区别" class="headerlink" title="2.3 let,const,var关键字区别"></a>2.3 let,const,var关键字区别</h4><p>变量的使用建议：</p><p>（1） 优先使用 const 关键字声明固定不变的量</p><p>（2） 使用 let 关键字声明变化的量</p><p>（3） 兼容性考虑 或 基于 jQuery 的项目使用 var; 基于 vue 的项目 let/const</p><h4 id="2-4-解构赋值（★★★）"><a href="#2-4-解构赋值（★★★）" class="headerlink" title="2.4 解构赋值（★★★）"></a><strong><span style="color: ; background-color: yellow;">2.4 解构赋值（★★★）</span></strong></h4><p>ES6中允许从数组中提取值，按照对应位置，对变量赋值，对象也可以实现解构<br>数组解构</p><h5 id="2-4-1-数组解构"><a href="#2-4-1-数组解构" class="headerlink" title="2.4.1 数组解构"></a>2.4.1 数组解构</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1. 对数组进行解构</span><br><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><span class="hljs-keyword">let</span> [a, b, c] = arr<br><span class="hljs-built_in">console</span>.log(a, b, c); <span class="hljs-comment">//3 4 5</span><br><br><span class="hljs-comment">// 2. 没有解构成功的变量，值为 undefined</span><br><span class="hljs-keyword">let</span> [a2, b2, c2, d2] = arr<br><span class="hljs-built_in">console</span>.log(d2);<span class="hljs-comment">//undefined</span><br><br><span class="hljs-comment">// 3. 不需要解构的元素可以使用 逗号 隔开</span><br><span class="hljs-keyword">let</span> [, , a1, b1] = arr<br><span class="hljs-built_in">console</span>.log(a1, b1)<span class="hljs-comment">// 4 5</span><br><br><span class="hljs-comment">// 4. 交换两个变量</span><br><span class="hljs-keyword">let</span> num1 = <span class="hljs-number">10</span><br><span class="hljs-keyword">let</span> num2 = <span class="hljs-number">20</span>;<br>[num1, num2] = [num2, num1] <span class="hljs-comment">//前面分号为了与上行代码隔开(针对无分号写法)</span><br><span class="hljs-built_in">console</span>.log(num1, num2);<br><span class="hljs-comment">// 注意: 无分号写法中, 以 () 或 [] 开头的语句前要加分隔符(! ;)</span><br></code></pre></td></tr></table></figure><h5 id="2-4-2-对象解构"><a href="#2-4-2-对象解构" class="headerlink" title="2.4.2 对象解构"></a>2.4.2 对象解构</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> data = &#123;<br>    id: <span class="hljs-number">1</span>,<br>    name: <span class="hljs-string">&#x27;家电&#x27;</span>,<br>    goods: &#123;<br>        id: <span class="hljs-number">11</span>,<br>        name: <span class="hljs-string">&#x27;洗衣机&#x27;</span>,<br>        goods: &#123;<br>            id: <span class="hljs-number">112</span>,<br>            name: <span class="hljs-string">&#x27;海尔&#x27;</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 获取112 和 海尔</span><br><span class="hljs-keyword">let</span> &#123;<span class="hljs-attr">goods</span>: &#123;<span class="hljs-attr">goods</span>: &#123;id,name&#125;&#125;&#125; = data<br><span class="hljs-built_in">console</span>.log(name, id);<br></code></pre></td></tr></table></figure><h5 id="2-4-3-小结"><a href="#2-4-3-小结" class="headerlink" title="2.4.3 小结"></a>2.4.3 小结</h5><p>小结</p><ul><li>解构赋值就是把数据结构分解，然后给变量进行赋值</li><li>如果结构不成功，变量跟数值个数不匹配的时候，变量的值为 undefined</li><li>数组解构用中括号包裹，多个变量用逗号隔开，对象解构用花括号包裹，多个变量用<br>逗号隔开</li><li>利用解构赋值能够让我们方便的去取对象中的属性跟方法</li></ul><h4 id="2-5-箭头函数（★★★）"><a href="#2-5-箭头函数（★★★）" class="headerlink" title="2.5 箭头函数（★★★）"></a><strong><span style="color: ; background-color: yellow;">2.5 箭头函数（★★★）</span></strong></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">() =&gt; &#123;&#125; <span class="hljs-comment">//()：代表是函数； =&gt;：必须要的符号，指向哪一个代码块；&#123;&#125;：函数体</span><br><span class="hljs-keyword">const</span> fn = <span class="hljs-function">() =&gt;</span> &#123;&#125;<span class="hljs-comment">//代表把一个函数赋值给fn</span><br></code></pre></td></tr></table></figure><ul><li><p>函数体中只有一句代码，且代码的执行结果就是返回值，可以省略大括号</p></li><li><p>如果形参只有一个，可以省略小括号</p></li><li><p>箭头函数没有自己的 this, 它里面的 this 指向箭头函数所处位置的 this ⭐⭐⭐</p></li></ul><h4 id="2-6-剩余参数（★★）"><a href="#2-6-剩余参数（★★）" class="headerlink" title="2.6 剩余参数（★★）"></a>2.6 剩余参数（★★）</h4><p>剩余参数使用在解构赋值中, 表示数组中剩余的所有元素 ，或者对象中剩余的所有属性</p><ol><li>把数组中剩下的元素组成新的数组</li><li>把对象剩下的属性组成一个新对象</li><li>使用剩余参数快速实现浅拷贝</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> getSum = <span class="hljs-function">(<span class="hljs-params">...rest</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> sum = <span class="hljs-number">0</span><br>    rest.forEach(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> sum += item)<br>    <span class="hljs-keyword">return</span> sum<br>&#125;<br><span class="hljs-keyword">const</span> res = getSum(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>)<br><span class="hljs-built_in">console</span>.log(res);<br><span class="hljs-comment">//使用剩余参数快速实现浅拷贝</span><br><span class="hljs-keyword">const</span> &#123;...obj2&#125; = obj1<br></code></pre></td></tr></table></figure><h3 id="3-ES6的内置对象扩展"><a href="#3-ES6的内置对象扩展" class="headerlink" title="3.ES6的内置对象扩展"></a>3.ES6的内置对象扩展</h3><h4 id="3-1-数组的扩展方法"><a href="#3-1-数组的扩展方法" class="headerlink" title="3.1 数组的扩展方法"></a>3.1 数组的扩展方法</h4><h5 id="扩展运算符（★★）"><a href="#扩展运算符（★★）" class="headerlink" title="扩展运算符（★★）"></a>扩展运算符（★★）</h5><p>拓展运算符（展开语法 或 spred运算符） …对象名 或 …数组名</p><p>作用：把数组或对象转为用逗号分隔的参数形式</p><ul><li>拓展数组</li><li>拓展对象</li><li>将伪数组转为真数组  arr = […spans]  或者Array.from()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr1 = [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">50</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>]<br><span class="hljs-built_in">console</span>.log(...arr1);<br></code></pre></td></tr></table></figure><h5 id="构造函数方法：Array-from"><a href="#构造函数方法：Array-from" class="headerlink" title="构造函数方法：Array.from()"></a>构造函数方法：Array.from()</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> obj = &#123;<br>      <span class="hljs-number">0</span>: <span class="hljs-string">&#x27;a&#x27;</span>,<br>      <span class="hljs-number">1</span>: <span class="hljs-string">&#x27;b&#x27;</span>,<br>      length: <span class="hljs-number">2</span><span class="hljs-comment">//必须写</span><br>&#125;<br><span class="hljs-keyword">const</span> arr = <span class="hljs-built_in">Array</span>.from(obj)<br></code></pre></td></tr></table></figure><h5 id="数组find方法"><a href="#数组find方法" class="headerlink" title="数组find方法"></a>数组find方法</h5><p>find 方法用于查找数组中符合条件的第一个元素，返回值: 找到的元素,没找到返回undefined</p><p>类比： filter(所有符合条件的元素)   some(返回布尔值)   indexOf(索引号)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 找出大于 10 的第一个元素</span><br><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">5</span>, <span class="hljs-number">12</span>, <span class="hljs-number">8</span>, <span class="hljs-number">13</span>, <span class="hljs-number">44</span>]<br><span class="hljs-keyword">const</span> res = arr.find(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item &gt; <span class="hljs-number">10</span>)<br><span class="hljs-built_in">console</span>.log(res);<span class="hljs-comment">//12</span><br></code></pre></td></tr></table></figure><h5 id="数组findIndex方法"><a href="#数组findIndex方法" class="headerlink" title="数组findIndex方法"></a>数组findIndex方法</h5><p>findIndex() 方法用于查找数组中符合条件的第一个元素的索引，返回值是索引值，找不到返回-1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">5</span>, <span class="hljs-number">12</span>, <span class="hljs-number">8</span>, <span class="hljs-number">130</span>, <span class="hljs-number">44</span>]<br><span class="hljs-keyword">const</span> res = arr.findIndex(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item &gt; <span class="hljs-number">100</span>)<br><span class="hljs-built_in">console</span>.log(res); <span class="hljs-comment">//3</span><br></code></pre></td></tr></table></figure><h5 id="实例方法：includes"><a href="#实例方法：includes" class="headerlink" title="实例方法：includes()"></a>实例方法：includes()</h5><p>判断某个数组是否包含给定的值，返回布尔值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>].includes(<span class="hljs-number">2</span>) <span class="hljs-comment">// true</span><br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>].includes(<span class="hljs-number">4</span>) <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><h4 id="3-2-字符串的扩展"><a href="#3-2-字符串的扩展" class="headerlink" title="3.2 字符串的扩展"></a>3.2 字符串的扩展</h4><p><strong><span style="color: ; background-color: yellow;">模板字符串</span></strong></p><p>ES6新增的创建字符串的方式，使用反引号定义。(强大的字符串变量拼接语法)</p><p>作用：</p><ol><li>使用反引号（``）代替单双引号</li><li>使用 ${变量名或表达式} 代替原来的 ‘引引加加’</li><li>模板字符串支持换行</li><li>在模板字符串中可以放任意的表达式 (如三元表达式, 函数调用, 逻辑运算符, +-*/…)</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> foo = <span class="hljs-function">() =&gt;</span> <span class="hljs-string">&#x27;456&#x27;</span><br><span class="hljs-keyword">let</span> str3 = <span class="hljs-string">`hello <span class="hljs-subst">$&#123;<span class="hljs-literal">true</span>?<span class="hljs-string">&#x27;abc&#x27;</span>:<span class="hljs-string">&#x27;def&#x27;</span>&#125;</span> <span class="hljs-subst">$&#123;foo()&#125;</span>`</span><br><span class="hljs-built_in">console</span>.log(str3);<span class="hljs-comment">//hello abc 456</span><br></code></pre></td></tr></table></figure><h5 id="实例方法：startsWith-和-endsWith"><a href="#实例方法：startsWith-和-endsWith" class="headerlink" title="实例方法：startsWith() 和 endsWith()"></a>实例方法：startsWith() 和 endsWith()</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;Hello world!&#x27;</span>;<br>str.startsWith(<span class="hljs-string">&#x27;Hello&#x27;</span>) <span class="hljs-comment">// true 表示参数字符串是否在原字符串的头部，返回布尔值</span><br>str.endsWith(<span class="hljs-string">&#x27;!&#x27;</span>)       <span class="hljs-comment">// true 表示参数字符串是否在原字符串的尾部，返回布尔值</span><br></code></pre></td></tr></table></figure><h5 id="实例方法：repeat"><a href="#实例方法：repeat" class="headerlink" title="实例方法：repeat()"></a>实例方法：repeat()</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&#x27;x&#x27;</span>.repeat(<span class="hljs-number">3</span>)      <span class="hljs-comment">// &quot;xxx&quot;</span><br><span class="hljs-string">&#x27;hello&#x27;</span>.repeat(<span class="hljs-number">2</span>)  <span class="hljs-comment">// &quot;hellohello&quot;</span><br></code></pre></td></tr></table></figure><h4 id="3-3-Set数据解构-★★"><a href="#3-3-Set数据解构-★★" class="headerlink" title="3.3 Set数据解构(★★)"></a>3.3 Set数据解构(★★)</h4><p>ES6 提供了新的数据结构 Set。它类似于数组，但是成员的值都是唯一的，没有重复的<br>值。</p><h5 id="Set操作"><a href="#Set操作" class="headerlink" title="Set操作"></a>Set操作</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1. 向 set 中添加元素 add()</span><br>mySet.add(<span class="hljs-number">8</span>)<br><br><span class="hljs-comment">// 2. 从 set 中删除元素 delete()</span><br>mySet.delete(<span class="hljs-number">5</span>)<br><br><span class="hljs-comment">// 3. 从 set 中查找元素 has()  返回布尔值</span><br><span class="hljs-built_in">console</span>.log(mySet.has(<span class="hljs-number">6</span>)); <span class="hljs-comment">//false</span><br><br><span class="hljs-comment">// 4. 清空所有元素 clear()</span><br>mySet.clear()<br><span class="hljs-built_in">console</span>.log(mySet);<br></code></pre></td></tr></table></figure><h5 id="Set遍历"><a href="#Set遍历" class="headerlink" title="Set遍历"></a>Set遍历</h5><p>1.forEach() 方法遍历 set 数据中的每个元素</p><p>2.for…of 方法遍历任何可迭代的数据( Set, 数组, Map, 字符串)</p><p>注意: 对象不支持直接 for..of 方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> mySet = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>([<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>])<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> mySet) &#123; <span class="hljs-comment">// 1. 遍历set数据</span><br>     <span class="hljs-built_in">console</span>.log(item);<br>&#125;<br><br><span class="hljs-keyword">const</span> obj = &#123;<br>    a: <span class="hljs-number">1</span>,<br>    b: <span class="hljs-number">2</span>,<br>    c: <span class="hljs-number">3</span><br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> <span class="hljs-built_in">Object</span>.keys(obj)) &#123; <span class="hljs-comment">//2. 遍历对象</span><br>     <span class="hljs-built_in">console</span>.log(item);<br>     <span class="hljs-built_in">console</span>.log(obj[item]);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>ES6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS基础-数组和字符串相关方法</title>
    <link href="/2021/02/09/JavaScript%E5%9F%BA%E7%A1%80-day06-%E6%95%B0%E7%BB%84%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E7%9B%B8%E5%85%B3%E6%96%B9%E6%B3%95/"/>
    <url>/2021/02/09/JavaScript%E5%9F%BA%E7%A1%80-day06-%E6%95%B0%E7%BB%84%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E7%9B%B8%E5%85%B3%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>总结了一些JS基础里，操作数据和字符串的常用方法。</p><p>其特性和书写方法需要加强记忆，反复练习。</p><h2 id="JS基础-数组的相关方法"><a href="#JS基础-数组的相关方法" class="headerlink" title="JS基础 - 数组的相关方法"></a>JS基础 - 数组的相关方法</h2><table><thead><tr><th align="left">方法名</th><th>作用</th><th>参数</th><th>返回值</th><th>修改原数组</th></tr></thead><tbody><tr><td align="left"><strong>★push(n1, n2)</strong></td><td>追加元素到数组末尾</td><td>要追加的元素</td><td>加过的数组长度</td><td>修改</td></tr><tr><td align="left"><strong>unshift(n1, n2)</strong></td><td>追加元素到数组开头</td><td>要追加的元素</td><td>加过的数组长度</td><td>修改</td></tr><tr><td align="left"><strong>Array.isArray()</strong></td><td>判断一个值是否是数组</td><td>值或变量</td><td>布尔值</td><td>–</td></tr><tr><td align="left"><strong>pop()</strong></td><td>从数组末尾删除一个元素</td><td>无</td><td>删除的元素</td><td>修改</td></tr><tr><td align="left"><strong>shift()</strong></td><td>从数组开头添加一个元素</td><td>无</td><td>删除的元素</td><td>修改</td></tr><tr><td align="left"><strong>sort(fn)</strong></td><td>对数组进行排序</td><td>函数</td><td>排序后的数组</td><td>修改</td></tr><tr><td align="left"><strong>reverse()</strong></td><td>对数组进行翻转</td><td>无</td><td>翻转后的数组</td><td>修改</td></tr><tr><td align="left"><strong>★indexOf(元素)</strong></td><td>查找元素在数组中第一次出现的索引</td><td>要查找的元素</td><td>索引值 ( - 1)</td><td>不会修改</td></tr><tr><td align="left"><strong>lastIndexOf(元素)</strong></td><td>从后向前查找元素在数组中出现的索引</td><td>要查找的元素</td><td>索引值 ( - 1)</td><td>不会修改</td></tr><tr><td align="left"><strong>★join(连接符)</strong></td><td>把数组中元素连接并返回字符串</td><td>连接符</td><td>字符串</td><td>不会修改</td></tr><tr><td align="left"><strong>toString()</strong></td><td>把复杂数据类型转成字符串形式</td><td>无</td><td>字符串</td><td>不会修改</td></tr><tr><td align="left"><strong>★slice(m[, n])</strong></td><td>从m位置开始截取数组到n结束</td><td>索引值</td><td>新数组</td><td>不会修改</td></tr><tr><td align="left"><strong>★splice(m, n)</strong></td><td>从m位置开始删除数组, 删除n个</td><td>(索引, 个数)</td><td>删除元素的新数组</td><td>会修改</td></tr><tr><td align="left"><strong>concat(arr1, arr2)</strong></td><td>拼接两个或多个数组</td><td>要拼接的数组</td><td>拼接后的新数组</td><td>不会修改</td></tr></tbody></table><h2 id="JS-基础-字符串的相关方法"><a href="#JS-基础-字符串的相关方法" class="headerlink" title="JS 基础 - 字符串的相关方法"></a>JS 基础 - 字符串的相关方法</h2><table><thead><tr><th>方法名</th><th>作用</th><th>参数</th><th>返回值</th></tr></thead><tbody><tr><td><strong>length</strong></td><td>获取字符串的长度</td><td>无</td><td>字符串的长度</td></tr><tr><td><strong>★str[i]</strong></td><td>获取指定索引位置的字符</td><td>无</td><td>单个字符</td></tr><tr><td><strong>charAt(i)</strong></td><td>获取指定索引位置的字符</td><td>索引</td><td>单个字符</td></tr><tr><td><strong>★indexOf(字符[, n])</strong></td><td>从位置 n 开始查找字符的索引位置</td><td>字符</td><td>索引值 (-1)</td></tr><tr><td><strong>lastIndexOf(字符)</strong></td><td>从后向前查找字符出现的索引位置</td><td>字符</td><td>索引值 (-1)</td></tr><tr><td><strong>★slice(m[, n])</strong></td><td>从 m 位置开始截取字符串, 截止到 n 位置</td><td>索引</td><td>截取后的字符</td></tr><tr><td><strong>★substr(m[, n])</strong></td><td>从 m 位置开始截取字符串, 截取 n 位数</td><td>索引</td><td>截取后的字符</td></tr><tr><td><strong>substring(m[, n])</strong></td><td>从 m 位置开始截取字符串, 截止到 n 位置</td><td>索引</td><td>截取后的字符</td></tr><tr><td><strong>★split(分隔符)</strong></td><td>把字符串按照指定的分隔符分隔成数组</td><td>分隔符</td><td>新数组</td></tr><tr><td><strong>toUpperCase()</strong></td><td>把字符串中的小写字母转大写</td><td>无</td><td>转化后的字符串</td></tr><tr><td><strong>toLowerCase()</strong></td><td>把字符串中的大写字母转小写</td><td>无</td><td>转化后的字符串</td></tr></tbody></table><p><strong>备注:</strong><br>字符串中所有的方法都不会修改原本的字符串, 要想修改只能重新赋值;</p><p>重点记忆★的相关方法</p>]]></content>
    
    
    <categories>
      
      <category>JS笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS高级-正则表达式</title>
    <link href="/2021/02/09/Javascript%E9%AB%98%E7%BA%A7-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2021/02/09/Javascript%E9%AB%98%E7%BA%A7-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>正则表达式（ Regular Expression ）是用于匹配字符串中字符组合的模式。在<br>JavaScript中，正则表达式也是对象。<br>正则表通常被用来检索、替换那些符合某个模式（规则）的文本，例如验证表单：用户<br>名表单只能输入英文字母、数字或者下划线， 昵称输入框中可以输入中文(匹配)。此外，<br>正则表达式还常用于过滤掉页面内容中的一些敏感词(替换)，或从字符串中获取我们想要<br>的特定部分(提取)等 。<br>在其他语言也会使用正则表达式，因此有很学习的必要。</p><h2 id="JS高级-day04-正则表达式"><a href="#JS高级-day04-正则表达式" class="headerlink" title="JS高级 day04-正则表达式"></a>JS高级 day04-正则表达式</h2><h3 id="1-正则表达式概述"><a href="#1-正则表达式概述" class="headerlink" title="1.正则表达式概述"></a>1.正则表达式概述</h3><h4 id="1-1概念"><a href="#1-1概念" class="headerlink" title="1.1概念"></a>1.1概念</h4><p>正则表达式（Regular Expression）是用于匹配字符串中字符组合的模式，在数据类型中是属于对象</p><h4 id="1-2作用及特点"><a href="#1-2作用及特点" class="headerlink" title="1.2作用及特点"></a>1.2作用及特点</h4><ul><li><p>作用：正则表达式通常用来校验、查找、替换指定规则的字符文本</p><ol><li><p>验证表单，如：只能输入英文、字母、数字和下划线</p><ol start="2"><li><p>过滤页面内容中的敏感词汇，或者对指定字符组合进行替换 </p></li><li><p>从字符串中提取我们想要的特定部分</p></li></ol></li></ol></li><li><p>特点：</p><ol><li><p>灵活性、逻辑性和功能性 （强大）</p></li><li><p>简单高效</p></li><li><p>可读性稍差，不便于记忆（一般复制相关的正则表达式，修改后即可使用）</p></li></ol></li></ul><h3 id="2-正则表达式使用"><a href="#2-正则表达式使用" class="headerlink" title="2.正则表达式使用"></a>2.正则表达式使用</h3><h4 id="2-1创建方式"><a href="#2-1创建方式" class="headerlink" title="2.1创建方式"></a>2.1创建方式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">构造函数方式：<span class="hljs-keyword">var</span> regexp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-regexp">/abc/</span>)<br><br>字面量方式：<span class="hljs-keyword">var</span> reg2 = <span class="hljs-regexp">/123/</span><br></code></pre></td></tr></table></figure><h4 id="2-2测试"><a href="#2-2测试" class="headerlink" title="2.2测试"></a>2.2测试</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(reg2.test(<span class="hljs-string">&#x27;123&#x27;</span>))<span class="hljs-comment">//返回值是布尔值</span><br><span class="hljs-built_in">console</span>.log(reg2.test(<span class="hljs-number">123456</span>)); <span class="hljs-comment">// false 不包含123</span><br></code></pre></td></tr></table></figure><h3 id="3-正则表达式中特殊字符"><a href="#3-正则表达式中特殊字符" class="headerlink" title="3.正则表达式中特殊字符"></a>3.正则表达式中特殊字符</h3><p>特殊字符非常多，可以参考：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions">MDN</a></p><h4 id="3-1边界符（位置符）"><a href="#3-1边界符（位置符）" class="headerlink" title="3.1边界符（位置符）"></a>3.1边界符（位置符）</h4><p>主要用来匹配字符的开始和结束位置:</p><p>   (1) ^: 用来匹配以…开头</p><p>   (2) $: 用来匹配以…结尾</p><p>注意：</p><p>   (1) 不使用 ^ 和 $ 表示只要字符串中包含匹配的内容就返回 true, 可以多出其他任意字符</p><p>   (2) ^ 和 $ 在一起配合使用，表示是精确匹配, 不能多出其他字符也不能少 (必须满足数量和类型都一致)</p><h4 id="3-2字符类"><a href="#3-2字符类" class="headerlink" title="3.2字符类"></a>3.2字符类</h4><p>[xyz]  只要包含x,y,z中任意一个就满足条件</p><p>[^xyz] 字符串中只要有一个不在中括号内的字符就满足规则</p><p>[a-f] :a,b,c,d,e,f</p><p>(xyz): 表示一个整体</p><h4 id="3-3量词符"><a href="#3-3量词符" class="headerlink" title="3.3量词符"></a>3.3量词符</h4><p>*：表示前面的字符出现 0 次或多次, 即可有可无 ( &gt;= 0)</p><p>+：表示前面的字符至少出现 1 次或多次, 即至少出现一次 ( &gt;= 0)</p><p>？：表示前面的字符出现 0 次或 1 次, 要么不出现, 要么只出现 1 次 ( 0 || 1)</p><p>{3}  {3,}  {3,6}：分别表示重复3次；3次及以上；3次到6次</p><h4 id="3-4预定义类"><a href="#3-4预定义类" class="headerlink" title="3.4预定义类"></a>3.4预定义类</h4><p>\d：匹配 0~9 之间的任意一个数字，等价于 [0-9]</p><p>\D: 匹配所有 0~9 之外的字符，非数字，等价于 [ ^0-9]</p><p>\w: 匹配任意的字母、数字和下划线，等价于 [a-zA-Z0-9_]</p><p>\W: 匹配任意的字母、数字和下划线之外的字符，等价于 [ ^0-9a-zA-Z_]</p><p>\s: 匹配所有的空格（包括换行符，制表符，空格符等），等价于 [\t\r\n\v\f]</p><p>\S：匹配所有的非空格符，等价于 [ ^\t\r\n\v\f]</p><p>记忆：所有大写字符表示 “非”, 上述预定义类只表示单个字符</p><h3 id="4-使用"><a href="#4-使用" class="headerlink" title="4.使用"></a>4.使用</h3><p>4.1 <a href="https://c.runoob.com/front-end/854">菜鸟工具</a></p><p>4.2 正则表达式查找和替换（replace，match）</p><p>replace(reg, 替换后的字符) 可以替换字符串中的字符，参数可以是普通字符串，也可以是正则表达式</p><p>指定匹配的模式：</p><p>   （1）/正则表达式/g    全局匹配</p><p>   （2）/正则表达式/i     忽略大小写进行匹配</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;abC123abC678abc345c&#x27;</span><br><span class="hljs-comment">// 把所有的 c 替换成 a</span><br>str = str.replace(<span class="hljs-regexp">/c/gi</span>, <span class="hljs-string">&#x27;a&#x27;</span>) <span class="hljs-comment">//正则加了g可以全局替换 否则只能替换第一个</span><br><br><span class="hljs-comment">// match 方法可以配合正则表达式, 从字符串中找出所有匹配正则的字符</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/\d&#123;3&#125;/g</span><br><span class="hljs-keyword">var</span> res = str.match(reg)<br><span class="hljs-built_in">console</span>.log(res); <span class="hljs-comment">//返回数组</span><br><br><span class="hljs-comment">// 替换敏感词 (傻叉)</span><br><span class="hljs-keyword">var</span> ipt = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;input&#x27;</span>)<br>ipt.addEventListener(<span class="hljs-string">&#x27;blur&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.value = <span class="hljs-built_in">this</span>.value.replace(<span class="hljs-regexp">/傻\s*叉|s\s*x/gi</span>, <span class="hljs-string">&#x27;**&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="5-案例"><a href="#5-案例" class="headerlink" title="5.案例"></a>5.案例</h3><p>表单验证</p>]]></content>
    
    
    <categories>
      
      <category>JS笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>正则表达式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/01/28/hello-world/"/>
    <url>/2021/01/28/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>搭建博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
      <tag>hello</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
